{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nimport axios from 'axios';\nimport { getAuthHeader, clearAuthData, setAuthData } from './utils';\nconst API_URL = 'http://localhost:3000/api/auth';\nclass AuthAPI {\n  // 用户注册\n  static async register({\n    username,\n    password,\n    email,\n    role,\n    mentorId\n  }) {\n    try {\n      const response = await axios.post(`${API_URL}/register`, {\n        username,\n        password,\n        email,\n        role,\n        mentor_id: mentorId\n      });\n      return response.data;\n    } catch (error) {\n      throw this._handleError(error);\n    }\n  }\n\n  // 用户登录\n  static async login({\n    username,\n    password\n  }) {\n    try {\n      const response = await axios.post(`${API_URL}/login`, {\n        username,\n        password\n      });\n      setAuthData(response.data.token); // 存储token\n      return this._getUserFromToken(response.data.token);\n    } catch (error) {\n      throw this._handleError(error);\n    }\n  }\n\n  // 获取当前用户信息\n  static async getCurrentUser() {\n    try {\n      const response = await axios.get(`${API_URL}/me`, {\n        headers: getAuthHeader()\n      });\n      return response.data;\n    } catch (error) {\n      clearAuthData(); // 清除无效token\n      throw this._handleError(error);\n    }\n  }\n\n  // 从JWT解析用户信息\n  static _getUserFromToken(token) {\n    const base64Payload = token.split('.')[1];\n    const payload = JSON.parse(atob(base64Payload));\n    return {\n      id: payload.id,\n      username: payload.username,\n      role: payload.role\n    };\n  }\n\n  // 统一错误处理\n  static _handleError(error) {\n    if (error.response) {\n      // 后端返回的业务错误\n      return new Error(error.response.data.message || '请求失败');\n    } else {\n      // 网络或系统错误\n      return new Error('网络连接异常，请稍后重试');\n    }\n  }\n}\nexport default AuthAPI;","map":{"version":3,"names":["axios","getAuthHeader","clearAuthData","setAuthData","API_URL","AuthAPI","register","username","password","email","role","mentorId","response","post","mentor_id","data","error","_handleError","login","token","_getUserFromToken","getCurrentUser","get","headers","base64Payload","split","payload","JSON","parse","atob","id","Error","message"],"sources":["C:/Users/仲佳泽/Desktop/大学作业/软件工程/moyun-reading-platform/frontend/src/api/auth.js"],"sourcesContent":["import axios from 'axios';\r\nimport { getAuthHeader, clearAuthData, setAuthData } from './utils';\r\n\r\nconst API_URL = 'http://localhost:3000/api/auth';\r\n\r\nclass AuthAPI {\r\n  // 用户注册\r\n  static async register({ username, password, email, role, mentorId }) {\r\n    try {\r\n      const response = await axios.post(`${API_URL}/register`, {\r\n        username,\r\n        password,\r\n        email,\r\n        role,\r\n        mentor_id: mentorId\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this._handleError(error);\r\n    }\r\n  }\r\n\r\n  // 用户登录\r\n  static async login({ username, password }) {\r\n    try {\r\n      const response = await axios.post(`${API_URL}/login`, {\r\n        username,\r\n        password\r\n      });\r\n      setAuthData(response.data.token); // 存储token\r\n      return this._getUserFromToken(response.data.token);\r\n    } catch (error) {\r\n      throw this._handleError(error);\r\n    }\r\n  }\r\n\r\n  // 获取当前用户信息\r\n  static async getCurrentUser() {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/me`, {\r\n        headers: getAuthHeader()\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      clearAuthData(); // 清除无效token\r\n      throw this._handleError(error);\r\n    }\r\n  }\r\n\r\n  // 从JWT解析用户信息\r\n  static _getUserFromToken(token) {\r\n    const base64Payload = token.split('.')[1];\r\n    const payload = JSON.parse(atob(base64Payload));\r\n    return {\r\n      id: payload.id,\r\n      username: payload.username,\r\n      role: payload.role\r\n    };\r\n  }\r\n\r\n  // 统一错误处理\r\n  static _handleError(error) {\r\n    if (error.response) {\r\n      // 后端返回的业务错误\r\n      return new Error(error.response.data.message || '请求失败');\r\n    } else {\r\n      // 网络或系统错误\r\n      return new Error('网络连接异常，请稍后重试');\r\n    }\r\n  }\r\n}\r\n\r\nexport default AuthAPI;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,EAAEC,aAAa,EAAEC,WAAW,QAAQ,SAAS;AAEnE,MAAMC,OAAO,GAAG,gCAAgC;AAEhD,MAAMC,OAAO,CAAC;EACZ;EACA,aAAaC,QAAQA,CAAC;IAAEC,QAAQ;IAAEC,QAAQ;IAAEC,KAAK;IAAEC,IAAI;IAAEC;EAAS,CAAC,EAAE;IACnE,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,IAAI,CAAC,GAAGT,OAAO,WAAW,EAAE;QACvDG,QAAQ;QACRC,QAAQ;QACRC,KAAK;QACLC,IAAI;QACJI,SAAS,EAAEH;MACb,CAAC,CAAC;MACF,OAAOC,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAM,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAChC;EACF;;EAEA;EACA,aAAaE,KAAKA,CAAC;IAAEX,QAAQ;IAAEC;EAAS,CAAC,EAAE;IACzC,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMZ,KAAK,CAACa,IAAI,CAAC,GAAGT,OAAO,QAAQ,EAAE;QACpDG,QAAQ;QACRC;MACF,CAAC,CAAC;MACFL,WAAW,CAACS,QAAQ,CAACG,IAAI,CAACI,KAAK,CAAC,CAAC,CAAC;MAClC,OAAO,IAAI,CAACC,iBAAiB,CAACR,QAAQ,CAACG,IAAI,CAACI,KAAK,CAAC;IACpD,CAAC,CAAC,OAAOH,KAAK,EAAE;MACd,MAAM,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAChC;EACF;;EAEA;EACA,aAAaK,cAAcA,CAAA,EAAG;IAC5B,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAMZ,KAAK,CAACsB,GAAG,CAAC,GAAGlB,OAAO,KAAK,EAAE;QAChDmB,OAAO,EAAEtB,aAAa,CAAC;MACzB,CAAC,CAAC;MACF,OAAOW,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdd,aAAa,CAAC,CAAC,CAAC,CAAC;MACjB,MAAM,IAAI,CAACe,YAAY,CAACD,KAAK,CAAC;IAChC;EACF;;EAEA;EACA,OAAOI,iBAAiBA,CAACD,KAAK,EAAE;IAC9B,MAAMK,aAAa,GAAGL,KAAK,CAACM,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACzC,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACL,aAAa,CAAC,CAAC;IAC/C,OAAO;MACLM,EAAE,EAAEJ,OAAO,CAACI,EAAE;MACdvB,QAAQ,EAAEmB,OAAO,CAACnB,QAAQ;MAC1BG,IAAI,EAAEgB,OAAO,CAAChB;IAChB,CAAC;EACH;;EAEA;EACA,OAAOO,YAAYA,CAACD,KAAK,EAAE;IACzB,IAAIA,KAAK,CAACJ,QAAQ,EAAE;MAClB;MACA,OAAO,IAAImB,KAAK,CAACf,KAAK,CAACJ,QAAQ,CAACG,IAAI,CAACiB,OAAO,IAAI,MAAM,CAAC;IACzD,CAAC,MAAM;MACL;MACA,OAAO,IAAID,KAAK,CAAC,cAAc,CAAC;IAClC;EACF;AACF;AAEA,eAAe1B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}