{"ast":null,"code":"import { User } from '@element-plus/icons-vue';\nimport { mapState, mapActions } from 'vuex';\nimport MemberList from '@/components/circle/MemberList.vue';\nimport PostList from '@/components/post/PostList.vue';\nimport InviteMemberForm from '@/components/circle/InviteMemberForm.vue';\nimport CreatePostForm from '@/components/post/CreatePostForm.vue';\nexport default {\n  name: 'CircleDetailView',\n  components: {\n    User,\n    MemberList,\n    PostList,\n    InviteMemberForm,\n    CreatePostForm\n  },\n  data() {\n    return {\n      circleId: this.$route.params.id,\n      showInviteDialog: false,\n      showCreatePostDialog: false\n    };\n  },\n  computed: {\n    ...mapState('circles', ['circle', 'members', 'loading']),\n    ...mapState('posts', ['posts', 'loadingPosts']),\n    isMentor() {\n      return this.$store.getters['auth/isMentor'] && this.circle?.mentor_id === this.$store.state.auth.user.id;\n    }\n  },\n  async created() {\n    await this.loadCircleData();\n  },\n  methods: {\n    ...mapActions('circles', ['fetchCircleDetail', 'fetchCircleMembers']),\n    ...mapActions('posts', ['fetchCirclePosts']),\n    async loadCircleData() {\n      await Promise.all([this.fetchCircleDetail(this.circleId), this.fetchCircleMembers(this.circleId), this.fetchCirclePosts({\n        circleId: this.circleId\n      })]);\n    },\n    handleMemberInvited() {\n      this.showInviteDialog = false;\n      this.fetchCircleMembers(this.circleId);\n    },\n    handlePostCreated(newPost) {\n      this.showCreatePostDialog = false;\n      this.posts.unshift(newPost);\n    }\n  }\n};","map":{"version":3,"names":["User","mapState","mapActions","MemberList","PostList","InviteMemberForm","CreatePostForm","name","components","data","circleId","$route","params","id","showInviteDialog","showCreatePostDialog","computed","isMentor","$store","getters","circle","mentor_id","state","auth","user","created","loadCircleData","methods","Promise","all","fetchCircleDetail","fetchCircleMembers","fetchCirclePosts","handleMemberInvited","handlePostCreated","newPost","posts","unshift"],"sources":["E:\\moyun-reading-platform\\frontend\\src\\views\\circles\\CircleDetail.vue"],"sourcesContent":["<template>\r\n    <div class=\"circle-detail-container\">\r\n      <el-page-header @back=\"$router.go(-1)\" :content=\"circle.name\" />\r\n      <el-divider />\r\n      \r\n      <el-row :gutter=\"20\">\r\n        <el-col :span=\"6\">\r\n          <div class=\"circle-info-card\">\r\n            <h3>圈子信息</h3>\r\n            <p class=\"description\">{{ circle.description || '暂无描述' }}</p>\r\n            <div class=\"member-count\">\r\n              <el-icon><User /></el-icon>\r\n              <span>{{ members.length }}名成员</span>\r\n            </div>\r\n            \r\n            <div class=\"actions\" v-if=\"isMentor\">\r\n              <el-button \r\n                type=\"primary\" \r\n                size=\"small\"\r\n                @click=\"showInviteDialog = true\"\r\n              >\r\n                邀请成员\r\n              </el-button>\r\n            </div>\r\n          </div>\r\n          \r\n          <member-list :members=\"members\" />\r\n        </el-col>\r\n        \r\n        <el-col :span=\"18\">\r\n          <post-list \r\n            :posts=\"posts\" \r\n            :loading=\"loadingPosts\"\r\n            @create-post=\"showCreatePostDialog = true\"\r\n          />\r\n        </el-col>\r\n      </el-row>\r\n      \r\n      <!-- 邀请成员对话框 -->\r\n      <el-dialog \r\n        title=\"邀请新成员\" \r\n        v-model=\"showInviteDialog\"\r\n        width=\"500px\"\r\n      >\r\n        <invite-member-form \r\n          :circle-id=\"circle.id\"\r\n          @success=\"handleMemberInvited\"\r\n        />\r\n      </el-dialog>\r\n      \r\n      <!-- 创建帖子对话框 -->\r\n      <el-dialog \r\n        title=\"发表新帖子\" \r\n        v-model=\"showCreatePostDialog\"\r\n        width=\"800px\"\r\n      >\r\n        <create-post-form \r\n          :circle-id=\"circle.id\"\r\n          @success=\"handlePostCreated\"\r\n        />\r\n      </el-dialog>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { User } from '@element-plus/icons-vue'\r\n  import { mapState, mapActions } from 'vuex'\r\n  import MemberList from '@/components/circle/MemberList.vue'\r\n  import PostList from '@/components/post/PostList.vue'\r\n  import InviteMemberForm from '@/components/circle/InviteMemberForm.vue'\r\n  import CreatePostForm from '@/components/post/CreatePostForm.vue'\r\n  \r\n  export default {\r\n    name: 'CircleDetailView',\r\n    components: {\r\n      User,\r\n      MemberList,\r\n      PostList,\r\n      InviteMemberForm,\r\n      CreatePostForm\r\n    },\r\n    data() {\r\n      return {\r\n        circleId: this.$route.params.id,\r\n        showInviteDialog: false,\r\n        showCreatePostDialog: false\r\n      }\r\n    },\r\n    computed: {\r\n      ...mapState('circles', ['circle', 'members', 'loading']),\r\n      ...mapState('posts', ['posts', 'loadingPosts']),\r\n      isMentor() {\r\n        return this.$store.getters['auth/isMentor'] && \r\n               this.circle?.mentor_id === this.$store.state.auth.user.id\r\n      }\r\n    },\r\n    async created() {\r\n      await this.loadCircleData()\r\n    },\r\n    methods: {\r\n      ...mapActions('circles', ['fetchCircleDetail', 'fetchCircleMembers']),\r\n      ...mapActions('posts', ['fetchCirclePosts']),\r\n      \r\n      async loadCircleData() {\r\n        await Promise.all([\r\n          this.fetchCircleDetail(this.circleId),\r\n          this.fetchCircleMembers(this.circleId),\r\n          this.fetchCirclePosts({ circleId: this.circleId })\r\n        ])\r\n      },\r\n      \r\n      handleMemberInvited() {\r\n        this.showInviteDialog = false\r\n        this.fetchCircleMembers(this.circleId)\r\n      },\r\n      \r\n      handlePostCreated(newPost) {\r\n        this.showCreatePostDialog = false\r\n        this.posts.unshift(newPost)\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .circle-detail-container {\r\n    padding: 20px;\r\n    max-width: 1200px;\r\n    margin: 0 auto;\r\n  }\r\n  \r\n  .circle-info-card {\r\n    padding: 20px;\r\n    margin-bottom: 20px;\r\n    background: #fff;\r\n    border-radius: 4px;\r\n    box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\r\n  }\r\n  \r\n  .description {\r\n    color: #666;\r\n    margin: 15px 0;\r\n  }\r\n  \r\n  .member-count {\r\n    display: flex;\r\n    align-items: center;\r\n    color: #888;\r\n    font-size: 14px;\r\n  }\r\n  \r\n  .member-count .el-icon {\r\n    margin-right: 5px;\r\n  }\r\n  \r\n  .actions {\r\n    margin-top: 20px;\r\n  }\r\n  </style>"],"mappings":"AAiEE,SAASA,IAAG,QAAS,yBAAwB;AAC7C,SAASC,QAAQ,EAAEC,UAAS,QAAS,MAAK;AAC1C,OAAOC,UAAS,MAAO,oCAAmC;AAC1D,OAAOC,QAAO,MAAO,gCAA+B;AACpD,OAAOC,gBAAe,MAAO,0CAAyC;AACtE,OAAOC,cAAa,MAAO,sCAAqC;AAEhE,eAAe;EACbC,IAAI,EAAE,kBAAkB;EACxBC,UAAU,EAAE;IACVR,IAAI;IACJG,UAAU;IACVC,QAAQ;IACRC,gBAAgB;IAChBC;EACF,CAAC;EACDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE;MAC/BC,gBAAgB,EAAE,KAAK;MACvBC,oBAAoB,EAAE;IACxB;EACF,CAAC;EACDC,QAAQ,EAAE;IACR,GAAGf,QAAQ,CAAC,SAAS,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;IACxD,GAAGA,QAAQ,CAAC,OAAO,EAAE,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;IAC/CgB,QAAQA,CAAA,EAAG;MACT,OAAO,IAAI,CAACC,MAAM,CAACC,OAAO,CAAC,eAAe,KACnC,IAAI,CAACC,MAAM,EAAEC,SAAQ,KAAM,IAAI,CAACH,MAAM,CAACI,KAAK,CAACC,IAAI,CAACC,IAAI,CAACX,EAAC;IACjE;EACF,CAAC;EACD,MAAMY,OAAOA,CAAA,EAAG;IACd,MAAM,IAAI,CAACC,cAAc,CAAC;EAC5B,CAAC;EACDC,OAAO,EAAE;IACP,GAAGzB,UAAU,CAAC,SAAS,EAAE,CAAC,mBAAmB,EAAE,oBAAoB,CAAC,CAAC;IACrE,GAAGA,UAAU,CAAC,OAAO,EAAE,CAAC,kBAAkB,CAAC,CAAC;IAE5C,MAAMwB,cAAcA,CAAA,EAAG;MACrB,MAAME,OAAO,CAACC,GAAG,CAAC,CAChB,IAAI,CAACC,iBAAiB,CAAC,IAAI,CAACpB,QAAQ,CAAC,EACrC,IAAI,CAACqB,kBAAkB,CAAC,IAAI,CAACrB,QAAQ,CAAC,EACtC,IAAI,CAACsB,gBAAgB,CAAC;QAAEtB,QAAQ,EAAE,IAAI,CAACA;MAAS,CAAC,EAClD;IACH,CAAC;IAEDuB,mBAAmBA,CAAA,EAAG;MACpB,IAAI,CAACnB,gBAAe,GAAI,KAAI;MAC5B,IAAI,CAACiB,kBAAkB,CAAC,IAAI,CAACrB,QAAQ;IACvC,CAAC;IAEDwB,iBAAiBA,CAACC,OAAO,EAAE;MACzB,IAAI,CAACpB,oBAAmB,GAAI,KAAI;MAChC,IAAI,CAACqB,KAAK,CAACC,OAAO,CAACF,OAAO;IAC5B;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}