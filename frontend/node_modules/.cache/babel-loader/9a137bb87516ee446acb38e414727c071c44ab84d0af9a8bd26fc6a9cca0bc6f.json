{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { getMentorDashboard, updateTodoStatus } from '@/api/dashboard';\nimport { Refresh } from '@element-plus/icons-vue';\nexport default {\n  name: 'MentorDashboard',\n  components: {\n    Refresh\n  },\n  data() {\n    return {\n      students: [],\n      activities: [],\n      todos: [],\n      checkedTodos: [],\n      loading: {\n        students: false,\n        activities: false,\n        todos: false\n      }\n    };\n  },\n  async created() {\n    await this.fetchDashboardData();\n  },\n  methods: {\n    async fetchDashboardData() {\n      try {\n        const dashboard = await getMentorDashboard();\n        this.students = dashboard.students;\n        this.activities = dashboard.activities;\n        this.todos = dashboard.todos;\n        this.checkedTodos = dashboard.todos.filter(todo => todo.completed).map(todo => todo.id);\n      } catch (error) {\n        this.$message.error('获取数据失败：' + error.message);\n      }\n    },\n    async refreshStudents() {\n      this.loading.students = true;\n      try {\n        const dashboard = await getMentorDashboard();\n        this.students = dashboard.students;\n      } catch (error) {\n        this.$message.error('刷新学生列表失败：' + error.message);\n      } finally {\n        this.loading.students = false;\n      }\n    },\n    async refreshActivities() {\n      this.loading.activities = true;\n      try {\n        const dashboard = await getMentorDashboard();\n        this.activities = dashboard.activities;\n      } catch (error) {\n        this.$message.error('刷新活动列表失败：' + error.message);\n      } finally {\n        this.loading.activities = false;\n      }\n    },\n    async refreshTodos() {\n      this.loading.todos = true;\n      try {\n        const dashboard = await getMentorDashboard();\n        this.todos = dashboard.todos;\n        this.checkedTodos = dashboard.todos.filter(todo => todo.completed).map(todo => todo.id);\n      } catch (error) {\n        this.$message.error('刷新待办事项失败：' + error.message);\n      } finally {\n        this.loading.todos = false;\n      }\n    },\n    async handleTodoChange(value) {\n      try {\n        const todoId = value[value.length - 1];\n        const completed = this.checkedTodos.includes(todoId);\n        await updateTodoStatus(todoId, completed);\n        this.$message.success('更新待办状态成功');\n      } catch (error) {\n        this.$message.error('更新待办状态失败：' + error.message);\n        // 恢复原状态\n        await this.refreshTodos();\n      }\n    },\n    viewStudentProfile(student) {\n      this.$router.push(`/profile/${student.id}`);\n    }\n  }\n};","map":{"version":3,"names":["getMentorDashboard","updateTodoStatus","Refresh","name","components","data","students","activities","todos","checkedTodos","loading","created","fetchDashboardData","methods","dashboard","filter","todo","completed","map","id","error","$message","message","refreshStudents","refreshActivities","refreshTodos","handleTodoChange","value","todoId","length","includes","success","viewStudentProfile","student","$router","push"],"sources":["E:\\moyun-reading-platform\\moyun-reading-platform\\frontend\\src\\views\\mentor\\MentorDashboard.vue"],"sourcesContent":["<template>\r\n  <div class=\"mentor-dashboard\">\r\n    <h1>导师工作台</h1>\r\n    <el-row :gutter=\"20\">\r\n      <el-col :span=\"8\">\r\n        <el-card v-loading=\"loading.students\">\r\n          <template #header>\r\n            <div class=\"card-header\">\r\n              <span>我的学生</span>\r\n              <el-button type=\"text\" @click=\"refreshStudents\">\r\n                <el-icon><Refresh /></el-icon>\r\n              </el-button>\r\n            </div>\r\n          </template>\r\n          <div class=\"student-list\">\r\n            <el-empty v-if=\"!students.length\" description=\"暂无学生\" />\r\n            <el-table v-else :data=\"students\" style=\"width: 100%\">\r\n              <el-table-column prop=\"username\" label=\"用户名\" />\r\n              <el-table-column prop=\"email\" label=\"邮箱\" />\r\n              <el-table-column label=\"操作\" width=\"120\">\r\n                <template #default=\"{ row }\">\r\n                  <el-button type=\"text\" @click=\"viewStudentProfile(row)\">\r\n                    查看详情\r\n                  </el-button>\r\n                </template>\r\n              </el-table-column>\r\n            </el-table>\r\n          </div>\r\n        </el-card>\r\n      </el-col>\r\n      <el-col :span=\"8\">\r\n        <el-card v-loading=\"loading.activities\">\r\n          <template #header>\r\n            <div class=\"card-header\">\r\n              <span>最近活动</span>\r\n              <el-button type=\"text\" @click=\"refreshActivities\">\r\n                <el-icon><Refresh /></el-icon>\r\n              </el-button>\r\n            </div>\r\n          </template>\r\n          <div class=\"activity-list\">\r\n            <el-empty v-if=\"!activities.length\" description=\"暂无活动\" />\r\n            <el-timeline v-else>\r\n              <el-timeline-item\r\n                v-for=\"activity in activities\"\r\n                :key=\"activity.id\"\r\n                :timestamp=\"activity.time\"\r\n                :type=\"activity.type\"\r\n              >\r\n                {{ activity.content }}\r\n              </el-timeline-item>\r\n            </el-timeline>\r\n          </div>\r\n        </el-card>\r\n      </el-col>\r\n      <el-col :span=\"8\">\r\n        <el-card v-loading=\"loading.todos\">\r\n          <template #header>\r\n            <div class=\"card-header\">\r\n              <span>待办事项</span>\r\n              <el-button type=\"text\" @click=\"refreshTodos\">\r\n                <el-icon><Refresh /></el-icon>\r\n              </el-button>\r\n            </div>\r\n          </template>\r\n          <div class=\"todo-list\">\r\n            <el-empty v-if=\"!todos.length\" description=\"暂无待办\" />\r\n            <el-checkbox-group v-else v-model=\"checkedTodos\" @change=\"handleTodoChange\">\r\n              <el-checkbox\r\n                v-for=\"todo in todos\"\r\n                :key=\"todo.id\"\r\n                :label=\"todo.id\"\r\n              >\r\n                {{ todo.content }}\r\n              </el-checkbox>\r\n            </el-checkbox-group>\r\n          </div>\r\n        </el-card>\r\n      </el-col>\r\n    </el-row>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getMentorDashboard, updateTodoStatus } from '@/api/dashboard'\r\nimport { Refresh } from '@element-plus/icons-vue'\r\n\r\nexport default {\r\n  name: 'MentorDashboard',\r\n  components: {\r\n    Refresh\r\n  },\r\n  data() {\r\n    return {\r\n      students: [],\r\n      activities: [],\r\n      todos: [],\r\n      checkedTodos: [],\r\n      loading: {\r\n        students: false,\r\n        activities: false,\r\n        todos: false\r\n      }\r\n    }\r\n  },\r\n  async created() {\r\n    await this.fetchDashboardData()\r\n  },\r\n  methods: {\r\n    async fetchDashboardData() {\r\n      try {\r\n        const dashboard = await getMentorDashboard()\r\n        this.students = dashboard.students\r\n        this.activities = dashboard.activities\r\n        this.todos = dashboard.todos\r\n        this.checkedTodos = dashboard.todos\r\n          .filter(todo => todo.completed)\r\n          .map(todo => todo.id)\r\n      } catch (error) {\r\n        this.$message.error('获取数据失败：' + error.message)\r\n      }\r\n    },\r\n    async refreshStudents() {\r\n      this.loading.students = true\r\n      try {\r\n        const dashboard = await getMentorDashboard()\r\n        this.students = dashboard.students\r\n      } catch (error) {\r\n        this.$message.error('刷新学生列表失败：' + error.message)\r\n      } finally {\r\n        this.loading.students = false\r\n      }\r\n    },\r\n    async refreshActivities() {\r\n      this.loading.activities = true\r\n      try {\r\n        const dashboard = await getMentorDashboard()\r\n        this.activities = dashboard.activities\r\n      } catch (error) {\r\n        this.$message.error('刷新活动列表失败：' + error.message)\r\n      } finally {\r\n        this.loading.activities = false\r\n      }\r\n    },\r\n    async refreshTodos() {\r\n      this.loading.todos = true\r\n      try {\r\n        const dashboard = await getMentorDashboard()\r\n        this.todos = dashboard.todos\r\n        this.checkedTodos = dashboard.todos\r\n          .filter(todo => todo.completed)\r\n          .map(todo => todo.id)\r\n      } catch (error) {\r\n        this.$message.error('刷新待办事项失败：' + error.message)\r\n      } finally {\r\n        this.loading.todos = false\r\n      }\r\n    },\r\n    async handleTodoChange(value) {\r\n      try {\r\n        const todoId = value[value.length - 1]\r\n        const completed = this.checkedTodos.includes(todoId)\r\n        await updateTodoStatus(todoId, completed)\r\n        this.$message.success('更新待办状态成功')\r\n      } catch (error) {\r\n        this.$message.error('更新待办状态失败：' + error.message)\r\n        // 恢复原状态\r\n        await this.refreshTodos()\r\n      }\r\n    },\r\n    viewStudentProfile(student) {\r\n      this.$router.push(`/profile/${student.id}`)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.mentor-dashboard {\r\n  padding: 20px;\r\n}\r\n\r\n.card-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.student-list,\r\n.activity-list,\r\n.todo-list {\r\n  min-height: 200px;\r\n}\r\n\r\n.el-timeline {\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.el-checkbox-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n}\r\n</style> "],"mappings":";;;;AAoFA,SAASA,kBAAkB,EAAEC,gBAAe,QAAS,iBAAgB;AACrE,SAASC,OAAM,QAAS,yBAAwB;AAEhD,eAAe;EACbC,IAAI,EAAE,iBAAiB;EACvBC,UAAU,EAAE;IACVF;EACF,CAAC;EACDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE,EAAE;MACdC,KAAK,EAAE,EAAE;MACTC,YAAY,EAAE,EAAE;MAChBC,OAAO,EAAE;QACPJ,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE,KAAK;QACjBC,KAAK,EAAE;MACT;IACF;EACF,CAAC;EACD,MAAMG,OAAOA,CAAA,EAAG;IACd,MAAM,IAAI,CAACC,kBAAkB,CAAC;EAChC,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,kBAAkBA,CAAA,EAAG;MACzB,IAAI;QACF,MAAME,SAAQ,GAAI,MAAMd,kBAAkB,CAAC;QAC3C,IAAI,CAACM,QAAO,GAAIQ,SAAS,CAACR,QAAO;QACjC,IAAI,CAACC,UAAS,GAAIO,SAAS,CAACP,UAAS;QACrC,IAAI,CAACC,KAAI,GAAIM,SAAS,CAACN,KAAI;QAC3B,IAAI,CAACC,YAAW,GAAIK,SAAS,CAACN,KAAI,CAC/BO,MAAM,CAACC,IAAG,IAAKA,IAAI,CAACC,SAAS,EAC7BC,GAAG,CAACF,IAAG,IAAKA,IAAI,CAACG,EAAE;MACxB,EAAE,OAAOC,KAAK,EAAE;QACd,IAAI,CAACC,QAAQ,CAACD,KAAK,CAAC,SAAQ,GAAIA,KAAK,CAACE,OAAO;MAC/C;IACF,CAAC;IACD,MAAMC,eAAeA,CAAA,EAAG;MACtB,IAAI,CAACb,OAAO,CAACJ,QAAO,GAAI,IAAG;MAC3B,IAAI;QACF,MAAMQ,SAAQ,GAAI,MAAMd,kBAAkB,CAAC;QAC3C,IAAI,CAACM,QAAO,GAAIQ,SAAS,CAACR,QAAO;MACnC,EAAE,OAAOc,KAAK,EAAE;QACd,IAAI,CAACC,QAAQ,CAACD,KAAK,CAAC,WAAU,GAAIA,KAAK,CAACE,OAAO;MACjD,UAAU;QACR,IAAI,CAACZ,OAAO,CAACJ,QAAO,GAAI,KAAI;MAC9B;IACF,CAAC;IACD,MAAMkB,iBAAiBA,CAAA,EAAG;MACxB,IAAI,CAACd,OAAO,CAACH,UAAS,GAAI,IAAG;MAC7B,IAAI;QACF,MAAMO,SAAQ,GAAI,MAAMd,kBAAkB,CAAC;QAC3C,IAAI,CAACO,UAAS,GAAIO,SAAS,CAACP,UAAS;MACvC,EAAE,OAAOa,KAAK,EAAE;QACd,IAAI,CAACC,QAAQ,CAACD,KAAK,CAAC,WAAU,GAAIA,KAAK,CAACE,OAAO;MACjD,UAAU;QACR,IAAI,CAACZ,OAAO,CAACH,UAAS,GAAI,KAAI;MAChC;IACF,CAAC;IACD,MAAMkB,YAAYA,CAAA,EAAG;MACnB,IAAI,CAACf,OAAO,CAACF,KAAI,GAAI,IAAG;MACxB,IAAI;QACF,MAAMM,SAAQ,GAAI,MAAMd,kBAAkB,CAAC;QAC3C,IAAI,CAACQ,KAAI,GAAIM,SAAS,CAACN,KAAI;QAC3B,IAAI,CAACC,YAAW,GAAIK,SAAS,CAACN,KAAI,CAC/BO,MAAM,CAACC,IAAG,IAAKA,IAAI,CAACC,SAAS,EAC7BC,GAAG,CAACF,IAAG,IAAKA,IAAI,CAACG,EAAE;MACxB,EAAE,OAAOC,KAAK,EAAE;QACd,IAAI,CAACC,QAAQ,CAACD,KAAK,CAAC,WAAU,GAAIA,KAAK,CAACE,OAAO;MACjD,UAAU;QACR,IAAI,CAACZ,OAAO,CAACF,KAAI,GAAI,KAAI;MAC3B;IACF,CAAC;IACD,MAAMkB,gBAAgBA,CAACC,KAAK,EAAE;MAC5B,IAAI;QACF,MAAMC,MAAK,GAAID,KAAK,CAACA,KAAK,CAACE,MAAK,GAAI,CAAC;QACrC,MAAMZ,SAAQ,GAAI,IAAI,CAACR,YAAY,CAACqB,QAAQ,CAACF,MAAM;QACnD,MAAM3B,gBAAgB,CAAC2B,MAAM,EAAEX,SAAS;QACxC,IAAI,CAACI,QAAQ,CAACU,OAAO,CAAC,UAAU;MAClC,EAAE,OAAOX,KAAK,EAAE;QACd,IAAI,CAACC,QAAQ,CAACD,KAAK,CAAC,WAAU,GAAIA,KAAK,CAACE,OAAO;QAC/C;QACA,MAAM,IAAI,CAACG,YAAY,CAAC;MAC1B;IACF,CAAC;IACDO,kBAAkBA,CAACC,OAAO,EAAE;MAC1B,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,YAAYF,OAAO,CAACd,EAAE,EAAE;IAC5C;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}