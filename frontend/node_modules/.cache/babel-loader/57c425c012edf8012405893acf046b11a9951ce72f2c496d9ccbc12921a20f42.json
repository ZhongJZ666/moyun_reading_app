{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { http } from '@/api/http';\nexport default {\n  namespaced: true,\n  state: {\n    messages: [],\n    unreadCount: 0,\n    loading: false,\n    currentChat: null\n  },\n  mutations: {\n    SET_MESSAGES(state, messages) {\n      state.messages = messages;\n    },\n    ADD_MESSAGE(state, message) {\n      state.messages.push(message);\n      if (message.senderId !== state.currentUser?.id) {\n        state.unreadCount++;\n      }\n    },\n    MARK_AS_READ(state, messageId) {\n      const message = state.messages.find(m => m.id === messageId);\n      if (message && !message.read) {\n        message.read = true;\n        state.unreadCount--;\n      }\n    },\n    MARK_ALL_AS_READ(state) {\n      state.messages.forEach(m => m.read = true);\n      state.unreadCount = 0;\n    },\n    DELETE_MESSAGE(state, messageId) {\n      const index = state.messages.findIndex(m => m.id === messageId);\n      if (index !== -1) {\n        const message = state.messages[index];\n        if (!message.read) {\n          state.unreadCount--;\n        }\n        state.messages.splice(index, 1);\n      }\n    },\n    SET_UNREAD_COUNT(state, count) {\n      state.unreadCount = count;\n    },\n    SET_LOADING(state, loading) {\n      state.loading = loading;\n    },\n    SET_CURRENT_CHAT(state, chat) {\n      state.currentChat = chat;\n    }\n  },\n  actions: {\n    async fetchMessages({\n      commit\n    }, {\n      page = 1,\n      size = 20,\n      type\n    } = {}) {\n      commit('SET_LOADING', true);\n      try {\n        const response = await http.get('/api/messages', {\n          params: {\n            page,\n            size,\n            type\n          }\n        });\n        commit('SET_MESSAGES', response.data.items);\n        return response.data;\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    async fetchChatMessages({\n      commit\n    }, {\n      userId,\n      page = 1,\n      size = 20\n    } = {}) {\n      commit('SET_LOADING', true);\n      try {\n        const response = await http.get(`/api/messages/chat/${userId}`, {\n          params: {\n            page,\n            size\n          }\n        });\n        commit('SET_MESSAGES', response.data.items);\n        return response.data;\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    async sendMessage({\n      commit\n    }, {\n      receiverId,\n      content\n    }) {\n      const response = await http.post('/api/messages', {\n        receiverId,\n        content\n      });\n      commit('ADD_MESSAGE', response.data);\n      return response.data;\n    },\n    async markAsRead({\n      commit\n    }, messageId) {\n      await http.put(`/api/messages/${messageId}/read`);\n      commit('MARK_AS_READ', messageId);\n    },\n    async markAllAsRead({\n      commit\n    }) {\n      await http.put('/api/messages/read-all');\n      commit('MARK_ALL_AS_READ');\n    },\n    async deleteMessage({\n      commit\n    }, messageId) {\n      await http.delete(`/api/messages/${messageId}`);\n      commit('DELETE_MESSAGE', messageId);\n    },\n    async clearAll({\n      commit\n    }) {\n      await http.delete('/api/messages');\n      commit('SET_MESSAGES', []);\n      commit('SET_UNREAD_COUNT', 0);\n    },\n    async fetchUnreadCount({\n      commit\n    }) {\n      const response = await http.get('/api/messages/unread/count');\n      commit('SET_UNREAD_COUNT', response.data.count);\n    }\n  }\n};","map":{"version":3,"names":["http","namespaced","state","messages","unreadCount","loading","currentChat","mutations","SET_MESSAGES","ADD_MESSAGE","message","push","senderId","currentUser","id","MARK_AS_READ","messageId","find","m","read","MARK_ALL_AS_READ","forEach","DELETE_MESSAGE","index","findIndex","splice","SET_UNREAD_COUNT","count","SET_LOADING","SET_CURRENT_CHAT","chat","actions","fetchMessages","commit","page","size","type","response","get","params","data","items","fetchChatMessages","userId","sendMessage","receiverId","content","post","markAsRead","put","markAllAsRead","deleteMessage","delete","clearAll","fetchUnreadCount"],"sources":["C:/Users/仲佳泽/Desktop/大学作业/软件工程/moyun-reading-platform/frontend/src/store/modules/messages.js"],"sourcesContent":["import { http } from '@/api/http'\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state: {\r\n    messages: [],\r\n    unreadCount: 0,\r\n    loading: false,\r\n    currentChat: null\r\n  },\r\n  mutations: {\r\n    SET_MESSAGES(state, messages) {\r\n      state.messages = messages\r\n    },\r\n    ADD_MESSAGE(state, message) {\r\n      state.messages.push(message)\r\n      if (message.senderId !== state.currentUser?.id) {\r\n        state.unreadCount++\r\n      }\r\n    },\r\n    MARK_AS_READ(state, messageId) {\r\n      const message = state.messages.find(m => m.id === messageId)\r\n      if (message && !message.read) {\r\n        message.read = true\r\n        state.unreadCount--\r\n      }\r\n    },\r\n    MARK_ALL_AS_READ(state) {\r\n      state.messages.forEach(m => m.read = true)\r\n      state.unreadCount = 0\r\n    },\r\n    DELETE_MESSAGE(state, messageId) {\r\n      const index = state.messages.findIndex(m => m.id === messageId)\r\n      if (index !== -1) {\r\n        const message = state.messages[index]\r\n        if (!message.read) {\r\n          state.unreadCount--\r\n        }\r\n        state.messages.splice(index, 1)\r\n      }\r\n    },\r\n    SET_UNREAD_COUNT(state, count) {\r\n      state.unreadCount = count\r\n    },\r\n    SET_LOADING(state, loading) {\r\n      state.loading = loading\r\n    },\r\n    SET_CURRENT_CHAT(state, chat) {\r\n      state.currentChat = chat\r\n    }\r\n  },\r\n  actions: {\r\n    async fetchMessages({ commit }, { page = 1, size = 20, type } = {}) {\r\n      commit('SET_LOADING', true)\r\n      try {\r\n        const response = await http.get('/api/messages', {\r\n          params: { page, size, type }\r\n        })\r\n        commit('SET_MESSAGES', response.data.items)\r\n        return response.data\r\n      } finally {\r\n        commit('SET_LOADING', false)\r\n      }\r\n    },\r\n    async fetchChatMessages({ commit }, { userId, page = 1, size = 20 } = {}) {\r\n      commit('SET_LOADING', true)\r\n      try {\r\n        const response = await http.get(`/api/messages/chat/${userId}`, {\r\n          params: { page, size }\r\n        })\r\n        commit('SET_MESSAGES', response.data.items)\r\n        return response.data\r\n      } finally {\r\n        commit('SET_LOADING', false)\r\n      }\r\n    },\r\n    async sendMessage({ commit }, { receiverId, content }) {\r\n      const response = await http.post('/api/messages', {\r\n        receiverId,\r\n        content\r\n      })\r\n      commit('ADD_MESSAGE', response.data)\r\n      return response.data\r\n    },\r\n    async markAsRead({ commit }, messageId) {\r\n      await http.put(`/api/messages/${messageId}/read`)\r\n      commit('MARK_AS_READ', messageId)\r\n    },\r\n    async markAllAsRead({ commit }) {\r\n      await http.put('/api/messages/read-all')\r\n      commit('MARK_ALL_AS_READ')\r\n    },\r\n    async deleteMessage({ commit }, messageId) {\r\n      await http.delete(`/api/messages/${messageId}`)\r\n      commit('DELETE_MESSAGE', messageId)\r\n    },\r\n    async clearAll({ commit }) {\r\n      await http.delete('/api/messages')\r\n      commit('SET_MESSAGES', [])\r\n      commit('SET_UNREAD_COUNT', 0)\r\n    },\r\n    async fetchUnreadCount({ commit }) {\r\n      const response = await http.get('/api/messages/unread/count')\r\n      commit('SET_UNREAD_COUNT', response.data.count)\r\n    }\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}