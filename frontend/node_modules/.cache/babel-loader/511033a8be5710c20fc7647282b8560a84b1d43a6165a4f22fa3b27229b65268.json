{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { http } from '@/api/http';\nexport default {\n  namespaced: true,\n  state: {\n    notifications: [],\n    unreadCount: 0,\n    loading: false\n  },\n  mutations: {\n    SET_NOTIFICATIONS(state, notifications) {\n      state.notifications = notifications;\n    },\n    ADD_NOTIFICATION(state, notification) {\n      state.notifications.unshift(notification);\n      state.unreadCount++;\n    },\n    MARK_AS_READ(state, notificationId) {\n      const notification = state.notifications.find(n => n.id === notificationId);\n      if (notification && !notification.read) {\n        notification.read = true;\n        state.unreadCount--;\n      }\n    },\n    MARK_ALL_AS_READ(state) {\n      state.notifications.forEach(n => n.read = true);\n      state.unreadCount = 0;\n    },\n    DELETE_NOTIFICATION(state, notificationId) {\n      const index = state.notifications.findIndex(n => n.id === notificationId);\n      if (index !== -1) {\n        const notification = state.notifications[index];\n        if (!notification.read) {\n          state.unreadCount--;\n        }\n        state.notifications.splice(index, 1);\n      }\n    },\n    SET_UNREAD_COUNT(state, count) {\n      state.unreadCount = count;\n    },\n    SET_LOADING(state, loading) {\n      state.loading = loading;\n    }\n  },\n  actions: {\n    async fetchNotifications({\n      commit\n    }, {\n      page = 1,\n      size = 20,\n      type\n    } = {}) {\n      commit('SET_LOADING', true);\n      try {\n        const response = await http.get('/api/notifications', {\n          params: {\n            page,\n            size,\n            type\n          }\n        });\n        commit('SET_NOTIFICATIONS', response.data.items);\n        return response.data;\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    async markAsRead({\n      commit\n    }, notificationId) {\n      await http.put(`/api/notifications/${notificationId}/read`);\n      commit('MARK_AS_READ', notificationId);\n    },\n    async markAllAsRead({\n      commit\n    }) {\n      await http.put('/api/notifications/read-all');\n      commit('MARK_ALL_AS_READ');\n    },\n    async deleteNotification({\n      commit\n    }, notificationId) {\n      await http.delete(`/api/notifications/${notificationId}`);\n      commit('DELETE_NOTIFICATION', notificationId);\n    },\n    async clearAll({\n      commit\n    }) {\n      await http.delete('/api/notifications');\n      commit('SET_NOTIFICATIONS', []);\n      commit('SET_UNREAD_COUNT', 0);\n    },\n    async fetchUnreadCount({\n      commit\n    }) {\n      const response = await http.get('/api/notifications/unread/count');\n      commit('SET_UNREAD_COUNT', response.data.count);\n    }\n  }\n};","map":{"version":3,"names":["http","namespaced","state","notifications","unreadCount","loading","mutations","SET_NOTIFICATIONS","ADD_NOTIFICATION","notification","unshift","MARK_AS_READ","notificationId","find","n","id","read","MARK_ALL_AS_READ","forEach","DELETE_NOTIFICATION","index","findIndex","splice","SET_UNREAD_COUNT","count","SET_LOADING","actions","fetchNotifications","commit","page","size","type","response","get","params","data","items","markAsRead","put","markAllAsRead","deleteNotification","delete","clearAll","fetchUnreadCount"],"sources":["E:/moyun-reading-platform/moyun-reading-platform/frontend/src/store/modules/notifications.js"],"sourcesContent":["import { http } from '@/api/http'\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state: {\r\n    notifications: [],\r\n    unreadCount: 0,\r\n    loading: false\r\n  },\r\n  mutations: {\r\n    SET_NOTIFICATIONS(state, notifications) {\r\n      state.notifications = notifications\r\n    },\r\n    ADD_NOTIFICATION(state, notification) {\r\n      state.notifications.unshift(notification)\r\n      state.unreadCount++\r\n    },\r\n    MARK_AS_READ(state, notificationId) {\r\n      const notification = state.notifications.find(n => n.id === notificationId)\r\n      if (notification && !notification.read) {\r\n        notification.read = true\r\n        state.unreadCount--\r\n      }\r\n    },\r\n    MARK_ALL_AS_READ(state) {\r\n      state.notifications.forEach(n => n.read = true)\r\n      state.unreadCount = 0\r\n    },\r\n    DELETE_NOTIFICATION(state, notificationId) {\r\n      const index = state.notifications.findIndex(n => n.id === notificationId)\r\n      if (index !== -1) {\r\n        const notification = state.notifications[index]\r\n        if (!notification.read) {\r\n          state.unreadCount--\r\n        }\r\n        state.notifications.splice(index, 1)\r\n      }\r\n    },\r\n    SET_UNREAD_COUNT(state, count) {\r\n      state.unreadCount = count\r\n    },\r\n    SET_LOADING(state, loading) {\r\n      state.loading = loading\r\n    }\r\n  },\r\n  actions: {\r\n    async fetchNotifications({ commit }, { page = 1, size = 20, type } = {}) {\r\n      commit('SET_LOADING', true)\r\n      try {\r\n        const response = await http.get('/api/notifications', {\r\n          params: { page, size, type }\r\n        })\r\n        commit('SET_NOTIFICATIONS', response.data.items)\r\n        return response.data\r\n      } finally {\r\n        commit('SET_LOADING', false)\r\n      }\r\n    },\r\n    async markAsRead({ commit }, notificationId) {\r\n      await http.put(`/api/notifications/${notificationId}/read`)\r\n      commit('MARK_AS_READ', notificationId)\r\n    },\r\n    async markAllAsRead({ commit }) {\r\n      await http.put('/api/notifications/read-all')\r\n      commit('MARK_ALL_AS_READ')\r\n    },\r\n    async deleteNotification({ commit }, notificationId) {\r\n      await http.delete(`/api/notifications/${notificationId}`)\r\n      commit('DELETE_NOTIFICATION', notificationId)\r\n    },\r\n    async clearAll({ commit }) {\r\n      await http.delete('/api/notifications')\r\n      commit('SET_NOTIFICATIONS', [])\r\n      commit('SET_UNREAD_COUNT', 0)\r\n    },\r\n    async fetchUnreadCount({ commit }) {\r\n      const response = await http.get('/api/notifications/unread/count')\r\n      commit('SET_UNREAD_COUNT', response.data.count)\r\n    }\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}