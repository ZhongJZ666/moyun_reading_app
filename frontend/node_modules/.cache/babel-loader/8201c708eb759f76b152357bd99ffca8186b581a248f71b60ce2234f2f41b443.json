{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { Bell, ChatDotRound, Star, User } from '@element-plus/icons-vue';\nimport { formatDistanceToNow } from 'date-fns';\nimport { zhCN } from 'date-fns/locale';\nexport default {\n  name: 'NotificationList',\n  components: {\n    Bell,\n    ChatDotRound,\n    Star,\n    User\n  },\n  data() {\n    return {\n      notifications: [],\n      activeType: 'all',\n      loading: false,\n      hasMore: true,\n      page: 1,\n      pageSize: 20\n    };\n  },\n  created() {\n    this.fetchNotifications();\n  },\n  methods: {\n    async fetchNotifications() {\n      this.loading = true;\n      try {\n        const response = await this.$http.get('/api/notifications', {\n          params: {\n            page: this.page,\n            size: this.pageSize,\n            type: this.activeType === 'all' ? undefined : this.activeType\n          }\n        });\n        if (this.page === 1) {\n          this.notifications = response.data.items;\n        } else {\n          this.notifications.push(...response.data.items);\n        }\n        this.hasMore = response.data.hasMore;\n      } catch (error) {\n        this.$message.error('获取通知列表失败');\n      } finally {\n        this.loading = false;\n      }\n    },\n    handleTypeChange() {\n      this.page = 1;\n      this.fetchNotifications();\n    },\n    async loadMore() {\n      this.page++;\n      await this.fetchNotifications();\n    },\n    getNotificationIcon(type) {\n      const icons = {\n        system: 'Bell',\n        comment: 'ChatDotRound',\n        like: 'Star',\n        follow: 'User'\n      };\n      return icons[type] || 'Bell';\n    },\n    formatTime(time) {\n      return formatDistanceToNow(new Date(time), {\n        addSuffix: true,\n        locale: zhCN\n      });\n    },\n    getTargetText(notification) {\n      const types = {\n        post: '查看帖子',\n        comment: '查看评论',\n        user: '查看用户'\n      };\n      return types[notification.target.type] || '查看详情';\n    },\n    async handleNotificationClick(notification) {\n      if (!notification.read) {\n        await this.markAsRead(notification);\n      }\n      this.handleTargetClick(notification);\n    },\n    async handleTargetClick(notification) {\n      const {\n        type,\n        id\n      } = notification.target;\n      switch (type) {\n        case 'post':\n          this.$router.push(`/posts/${id}`);\n          break;\n        case 'comment':\n          this.$router.push(`/posts/${notification.target.postId}#comment-${id}`);\n          break;\n        case 'user':\n          this.$router.push(`/users/${id}`);\n          break;\n      }\n    },\n    async markAsRead(notification) {\n      try {\n        await this.$http.put(`/api/notifications/${notification.id}/read`);\n        notification.read = true;\n      } catch (error) {\n        this.$message.error('标记已读失败');\n      }\n    },\n    async markAllRead() {\n      try {\n        await this.$http.put('/api/notifications/read-all');\n        this.notifications.forEach(n => n.read = true);\n        this.$message.success('已全部标为已读');\n      } catch (error) {\n        this.$message.error('操作失败');\n      }\n    },\n    async deleteNotification(notification) {\n      try {\n        await this.$confirm('确定要删除这条通知吗？', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        });\n        await this.$http.delete(`/api/notifications/${notification.id}`);\n        const index = this.notifications.findIndex(n => n.id === notification.id);\n        if (index !== -1) {\n          this.notifications.splice(index, 1);\n        }\n      } catch (error) {\n        if (error !== 'cancel') {\n          this.$message.error('删除失败');\n        }\n      }\n    },\n    async clearAll() {\n      try {\n        await this.$confirm('确定要清空所有通知吗？', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        });\n        await this.$http.delete('/api/notifications');\n        this.notifications = [];\n        this.$message.success('通知已清空');\n      } catch (error) {\n        if (error !== 'cancel') {\n          this.$message.error('清空失败');\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["Bell","ChatDotRound","Star","User","formatDistanceToNow","zhCN","name","components","data","notifications","activeType","loading","hasMore","page","pageSize","created","fetchNotifications","methods","response","$http","get","params","size","type","undefined","items","push","error","$message","handleTypeChange","loadMore","getNotificationIcon","icons","system","comment","like","follow","formatTime","time","Date","addSuffix","locale","getTargetText","notification","types","post","user","target","handleNotificationClick","read","markAsRead","handleTargetClick","id","$router","postId","put","markAllRead","forEach","n","success","deleteNotification","$confirm","confirmButtonText","cancelButtonText","delete","index","findIndex","splice","clearAll"],"sources":["E:\\moyun-reading-platform\\moyun-reading-platform\\frontend\\src\\components\\notification\\NotificationList.vue"],"sourcesContent":["<template>\r\n  <div class=\"notification-list\">\r\n    <div class=\"notification-header\">\r\n      <h2>通知中心</h2>\r\n      <div class=\"header-actions\">\r\n        <el-button\r\n          type=\"primary\"\r\n          link\r\n          @click=\"markAllRead\"\r\n        >\r\n          全部标为已读\r\n        </el-button>\r\n        <el-button\r\n          type=\"danger\"\r\n          link\r\n          @click=\"clearAll\"\r\n        >\r\n          清空通知\r\n        </el-button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 通知类型筛选 -->\r\n    <div class=\"filter-bar\">\r\n      <el-radio-group v-model=\"activeType\" @change=\"handleTypeChange\">\r\n        <el-radio-button label=\"all\">全部</el-radio-button>\r\n        <el-radio-button label=\"system\">系统通知</el-radio-button>\r\n        <el-radio-button label=\"comment\">评论通知</el-radio-button>\r\n        <el-radio-button label=\"like\">点赞通知</el-radio-button>\r\n        <el-radio-button label=\"follow\">关注通知</el-radio-button>\r\n      </el-radio-group>\r\n    </div>\r\n\r\n    <!-- 通知列表 -->\r\n    <div class=\"notification-items\">\r\n      <div\r\n        v-for=\"notification in notifications\"\r\n        :key=\"notification.id\"\r\n        class=\"notification-item\"\r\n        :class=\"{ unread: !notification.read }\"\r\n        @click=\"handleNotificationClick(notification)\"\r\n      >\r\n        <div class=\"notification-icon\">\r\n          <el-avatar\r\n            :size=\"40\"\r\n            :src=\"notification.sender?.avatar\"\r\n          >\r\n            <el-icon>\r\n              <component :is=\"getNotificationIcon(notification.type)\" />\r\n            </el-icon>\r\n          </el-avatar>\r\n        </div>\r\n\r\n        <div class=\"notification-content\">\r\n          <div class=\"notification-header\">\r\n            <span class=\"sender\">{{ notification.sender?.username || '系统' }}</span>\r\n            <span class=\"time\">{{ formatTime(notification.createTime) }}</span>\r\n          </div>\r\n          <div class=\"notification-body\">\r\n            {{ notification.content }}\r\n          </div>\r\n          <div\r\n            v-if=\"notification.target\"\r\n            class=\"notification-target\"\r\n            @click.stop=\"handleTargetClick(notification)\"\r\n          >\r\n            {{ getTargetText(notification) }}\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"notification-actions\">\r\n          <el-button\r\n            v-if=\"!notification.read\"\r\n            type=\"primary\"\r\n            link\r\n            @click.stop=\"markAsRead(notification)\"\r\n          >\r\n            标为已读\r\n          </el-button>\r\n          <el-button\r\n            type=\"danger\"\r\n            link\r\n            @click.stop=\"deleteNotification(notification)\"\r\n          >\r\n            删除\r\n          </el-button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 空状态 -->\r\n      <el-empty\r\n        v-if=\"notifications.length === 0\"\r\n        description=\"暂无通知\"\r\n      />\r\n    </div>\r\n\r\n    <!-- 加载更多 -->\r\n    <div\r\n      v-if=\"hasMore\"\r\n      class=\"load-more\"\r\n    >\r\n      <el-button\r\n        :loading=\"loading\"\r\n        @click=\"loadMore\"\r\n      >\r\n        加载更多\r\n      </el-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { Bell, ChatDotRound, Star, User } from '@element-plus/icons-vue'\r\nimport { formatDistanceToNow } from 'date-fns'\r\nimport { zhCN } from 'date-fns/locale'\r\n\r\nexport default {\r\n  name: 'NotificationList',\r\n  components: {\r\n    Bell,\r\n    ChatDotRound,\r\n    Star,\r\n    User\r\n  },\r\n  data() {\r\n    return {\r\n      notifications: [],\r\n      activeType: 'all',\r\n      loading: false,\r\n      hasMore: true,\r\n      page: 1,\r\n      pageSize: 20\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchNotifications()\r\n  },\r\n  methods: {\r\n    async fetchNotifications() {\r\n      this.loading = true\r\n      try {\r\n        const response = await this.$http.get('/api/notifications', {\r\n          params: {\r\n            page: this.page,\r\n            size: this.pageSize,\r\n            type: this.activeType === 'all' ? undefined : this.activeType\r\n          }\r\n        })\r\n        if (this.page === 1) {\r\n          this.notifications = response.data.items\r\n        } else {\r\n          this.notifications.push(...response.data.items)\r\n        }\r\n        this.hasMore = response.data.hasMore\r\n      } catch (error) {\r\n        this.$message.error('获取通知列表失败')\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n    handleTypeChange() {\r\n      this.page = 1\r\n      this.fetchNotifications()\r\n    },\r\n    async loadMore() {\r\n      this.page++\r\n      await this.fetchNotifications()\r\n    },\r\n    getNotificationIcon(type) {\r\n      const icons = {\r\n        system: 'Bell',\r\n        comment: 'ChatDotRound',\r\n        like: 'Star',\r\n        follow: 'User'\r\n      }\r\n      return icons[type] || 'Bell'\r\n    },\r\n    formatTime(time) {\r\n      return formatDistanceToNow(new Date(time), {\r\n        addSuffix: true,\r\n        locale: zhCN\r\n      })\r\n    },\r\n    getTargetText(notification) {\r\n      const types = {\r\n        post: '查看帖子',\r\n        comment: '查看评论',\r\n        user: '查看用户'\r\n      }\r\n      return types[notification.target.type] || '查看详情'\r\n    },\r\n    async handleNotificationClick(notification) {\r\n      if (!notification.read) {\r\n        await this.markAsRead(notification)\r\n      }\r\n      this.handleTargetClick(notification)\r\n    },\r\n    async handleTargetClick(notification) {\r\n      const { type, id } = notification.target\r\n      switch (type) {\r\n        case 'post':\r\n          this.$router.push(`/posts/${id}`)\r\n          break\r\n        case 'comment':\r\n          this.$router.push(`/posts/${notification.target.postId}#comment-${id}`)\r\n          break\r\n        case 'user':\r\n          this.$router.push(`/users/${id}`)\r\n          break\r\n      }\r\n    },\r\n    async markAsRead(notification) {\r\n      try {\r\n        await this.$http.put(`/api/notifications/${notification.id}/read`)\r\n        notification.read = true\r\n      } catch (error) {\r\n        this.$message.error('标记已读失败')\r\n      }\r\n    },\r\n    async markAllRead() {\r\n      try {\r\n        await this.$http.put('/api/notifications/read-all')\r\n        this.notifications.forEach(n => n.read = true)\r\n        this.$message.success('已全部标为已读')\r\n      } catch (error) {\r\n        this.$message.error('操作失败')\r\n      }\r\n    },\r\n    async deleteNotification(notification) {\r\n      try {\r\n        await this.$confirm('确定要删除这条通知吗？', '提示', {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消',\r\n          type: 'warning'\r\n        })\r\n        await this.$http.delete(`/api/notifications/${notification.id}`)\r\n        const index = this.notifications.findIndex(n => n.id === notification.id)\r\n        if (index !== -1) {\r\n          this.notifications.splice(index, 1)\r\n        }\r\n      } catch (error) {\r\n        if (error !== 'cancel') {\r\n          this.$message.error('删除失败')\r\n        }\r\n      }\r\n    },\r\n    async clearAll() {\r\n      try {\r\n        await this.$confirm('确定要清空所有通知吗？', '提示', {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消',\r\n          type: 'warning'\r\n        })\r\n        await this.$http.delete('/api/notifications')\r\n        this.notifications = []\r\n        this.$message.success('通知已清空')\r\n      } catch (error) {\r\n        if (error !== 'cancel') {\r\n          this.$message.error('清空失败')\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.notification-list {\r\n  .notification-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 20px;\r\n\r\n    h2 {\r\n      margin: 0;\r\n      font-size: 24px;\r\n      color: var(--text-color);\r\n    }\r\n\r\n    .header-actions {\r\n      display: flex;\r\n      gap: 10px;\r\n    }\r\n  }\r\n\r\n  .filter-bar {\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  .notification-items {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 15px;\r\n  }\r\n\r\n  .notification-item {\r\n    display: flex;\r\n    gap: 15px;\r\n    padding: 15px;\r\n    background-color: var(--background-color-light);\r\n    border-radius: 8px;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s;\r\n\r\n    &:hover {\r\n      background-color: var(--background-color-hover);\r\n    }\r\n\r\n    &.unread {\r\n      background-color: var(--background-color-active);\r\n    }\r\n  }\r\n\r\n  .notification-content {\r\n    flex: 1;\r\n    min-width: 0;\r\n  }\r\n\r\n  .notification-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 5px;\r\n\r\n    .sender {\r\n      font-weight: bold;\r\n      color: var(--text-color);\r\n    }\r\n\r\n    .time {\r\n      font-size: 12px;\r\n      color: var(--text-color-secondary);\r\n    }\r\n  }\r\n\r\n  .notification-body {\r\n    color: var(--text-color);\r\n    margin-bottom: 5px;\r\n  }\r\n\r\n  .notification-target {\r\n    font-size: 12px;\r\n    color: var(--primary-color);\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n\r\n  .notification-actions {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    gap: 5px;\r\n  }\r\n\r\n  .load-more {\r\n    margin-top: 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n}\r\n</style> "],"mappings":";;;AAgHA,SAASA,IAAI,EAAEC,YAAY,EAAEC,IAAI,EAAEC,IAAG,QAAS,yBAAwB;AACvE,SAASC,mBAAkB,QAAS,UAAS;AAC7C,SAASC,IAAG,QAAS,iBAAgB;AAErC,eAAe;EACbC,IAAI,EAAE,kBAAkB;EACxBC,UAAU,EAAE;IACVP,IAAI;IACJC,YAAY;IACZC,IAAI;IACJC;EACF,CAAC;EACDK,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,aAAa,EAAE,EAAE;MACjBC,UAAU,EAAE,KAAK;MACjBC,OAAO,EAAE,KAAK;MACdC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAE,CAAC;MACPC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,kBAAkB,CAAC;EAC1B,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,kBAAkBA,CAAA,EAAG;MACzB,IAAI,CAACL,OAAM,GAAI,IAAG;MAClB,IAAI;QACF,MAAMO,QAAO,GAAI,MAAM,IAAI,CAACC,KAAK,CAACC,GAAG,CAAC,oBAAoB,EAAE;UAC1DC,MAAM,EAAE;YACNR,IAAI,EAAE,IAAI,CAACA,IAAI;YACfS,IAAI,EAAE,IAAI,CAACR,QAAQ;YACnBS,IAAI,EAAE,IAAI,CAACb,UAAS,KAAM,KAAI,GAAIc,SAAQ,GAAI,IAAI,CAACd;UACrD;QACF,CAAC;QACD,IAAI,IAAI,CAACG,IAAG,KAAM,CAAC,EAAE;UACnB,IAAI,CAACJ,aAAY,GAAIS,QAAQ,CAACV,IAAI,CAACiB,KAAI;QACzC,OAAO;UACL,IAAI,CAAChB,aAAa,CAACiB,IAAI,CAAC,GAAGR,QAAQ,CAACV,IAAI,CAACiB,KAAK;QAChD;QACA,IAAI,CAACb,OAAM,GAAIM,QAAQ,CAACV,IAAI,CAACI,OAAM;MACrC,EAAE,OAAOe,KAAK,EAAE;QACd,IAAI,CAACC,QAAQ,CAACD,KAAK,CAAC,UAAU;MAChC,UAAU;QACR,IAAI,CAAChB,OAAM,GAAI,KAAI;MACrB;IACF,CAAC;IACDkB,gBAAgBA,CAAA,EAAG;MACjB,IAAI,CAAChB,IAAG,GAAI;MACZ,IAAI,CAACG,kBAAkB,CAAC;IAC1B,CAAC;IACD,MAAMc,QAAQA,CAAA,EAAG;MACf,IAAI,CAACjB,IAAI,EAAC;MACV,MAAM,IAAI,CAACG,kBAAkB,CAAC;IAChC,CAAC;IACDe,mBAAmBA,CAACR,IAAI,EAAE;MACxB,MAAMS,KAAI,GAAI;QACZC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE,cAAc;QACvBC,IAAI,EAAE,MAAM;QACZC,MAAM,EAAE;MACV;MACA,OAAOJ,KAAK,CAACT,IAAI,KAAK,MAAK;IAC7B,CAAC;IACDc,UAAUA,CAACC,IAAI,EAAE;MACf,OAAOlC,mBAAmB,CAAC,IAAImC,IAAI,CAACD,IAAI,CAAC,EAAE;QACzCE,SAAS,EAAE,IAAI;QACfC,MAAM,EAAEpC;MACV,CAAC;IACH,CAAC;IACDqC,aAAaA,CAACC,YAAY,EAAE;MAC1B,MAAMC,KAAI,GAAI;QACZC,IAAI,EAAE,MAAM;QACZX,OAAO,EAAE,MAAM;QACfY,IAAI,EAAE;MACR;MACA,OAAOF,KAAK,CAACD,YAAY,CAACI,MAAM,CAACxB,IAAI,KAAK,MAAK;IACjD,CAAC;IACD,MAAMyB,uBAAuBA,CAACL,YAAY,EAAE;MAC1C,IAAI,CAACA,YAAY,CAACM,IAAI,EAAE;QACtB,MAAM,IAAI,CAACC,UAAU,CAACP,YAAY;MACpC;MACA,IAAI,CAACQ,iBAAiB,CAACR,YAAY;IACrC,CAAC;IACD,MAAMQ,iBAAiBA,CAACR,YAAY,EAAE;MACpC,MAAM;QAAEpB,IAAI;QAAE6B;MAAG,IAAIT,YAAY,CAACI,MAAK;MACvC,QAAQxB,IAAI;QACV,KAAK,MAAM;UACT,IAAI,CAAC8B,OAAO,CAAC3B,IAAI,CAAC,UAAU0B,EAAE,EAAE;UAChC;QACF,KAAK,SAAS;UACZ,IAAI,CAACC,OAAO,CAAC3B,IAAI,CAAC,UAAUiB,YAAY,CAACI,MAAM,CAACO,MAAM,YAAYF,EAAE,EAAE;UACtE;QACF,KAAK,MAAM;UACT,IAAI,CAACC,OAAO,CAAC3B,IAAI,CAAC,UAAU0B,EAAE,EAAE;UAChC;MACJ;IACF,CAAC;IACD,MAAMF,UAAUA,CAACP,YAAY,EAAE;MAC7B,IAAI;QACF,MAAM,IAAI,CAACxB,KAAK,CAACoC,GAAG,CAAC,sBAAsBZ,YAAY,CAACS,EAAE,OAAO;QACjET,YAAY,CAACM,IAAG,GAAI,IAAG;MACzB,EAAE,OAAOtB,KAAK,EAAE;QACd,IAAI,CAACC,QAAQ,CAACD,KAAK,CAAC,QAAQ;MAC9B;IACF,CAAC;IACD,MAAM6B,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,MAAM,IAAI,CAACrC,KAAK,CAACoC,GAAG,CAAC,6BAA6B;QAClD,IAAI,CAAC9C,aAAa,CAACgD,OAAO,CAACC,CAAA,IAAKA,CAAC,CAACT,IAAG,GAAI,IAAI;QAC7C,IAAI,CAACrB,QAAQ,CAAC+B,OAAO,CAAC,SAAS;MACjC,EAAE,OAAOhC,KAAK,EAAE;QACd,IAAI,CAACC,QAAQ,CAACD,KAAK,CAAC,MAAM;MAC5B;IACF,CAAC;IACD,MAAMiC,kBAAkBA,CAACjB,YAAY,EAAE;MACrC,IAAI;QACF,MAAM,IAAI,CAACkB,QAAQ,CAAC,aAAa,EAAE,IAAI,EAAE;UACvCC,iBAAiB,EAAE,IAAI;UACvBC,gBAAgB,EAAE,IAAI;UACtBxC,IAAI,EAAE;QACR,CAAC;QACD,MAAM,IAAI,CAACJ,KAAK,CAAC6C,MAAM,CAAC,sBAAsBrB,YAAY,CAACS,EAAE,EAAE;QAC/D,MAAMa,KAAI,GAAI,IAAI,CAACxD,aAAa,CAACyD,SAAS,CAACR,CAAA,IAAKA,CAAC,CAACN,EAAC,KAAMT,YAAY,CAACS,EAAE;QACxE,IAAIa,KAAI,KAAM,CAAC,CAAC,EAAE;UAChB,IAAI,CAACxD,aAAa,CAAC0D,MAAM,CAACF,KAAK,EAAE,CAAC;QACpC;MACF,EAAE,OAAOtC,KAAK,EAAE;QACd,IAAIA,KAAI,KAAM,QAAQ,EAAE;UACtB,IAAI,CAACC,QAAQ,CAACD,KAAK,CAAC,MAAM;QAC5B;MACF;IACF,CAAC;IACD,MAAMyC,QAAQA,CAAA,EAAG;MACf,IAAI;QACF,MAAM,IAAI,CAACP,QAAQ,CAAC,aAAa,EAAE,IAAI,EAAE;UACvCC,iBAAiB,EAAE,IAAI;UACvBC,gBAAgB,EAAE,IAAI;UACtBxC,IAAI,EAAE;QACR,CAAC;QACD,MAAM,IAAI,CAACJ,KAAK,CAAC6C,MAAM,CAAC,oBAAoB;QAC5C,IAAI,CAACvD,aAAY,GAAI,EAAC;QACtB,IAAI,CAACmB,QAAQ,CAAC+B,OAAO,CAAC,OAAO;MAC/B,EAAE,OAAOhC,KAAK,EAAE;QACd,IAAIA,KAAI,KAAM,QAAQ,EAAE;UACtB,IAAI,CAACC,QAAQ,CAACD,KAAK,CAAC,MAAM;QAC5B;MACF;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}