{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nimport request from '@/utils/request';\nimport { getAuthHeader, clearAuthData, setAuthData } from './utils';\nclass AuthAPI {\n  // 用户注册\n  static async register(userData) {\n    return request({\n      url: '/auth/register',\n      method: 'post',\n      data: userData\n    });\n  }\n\n  // 用户登录\n  static async login(username, password) {\n    const response = await request({\n      url: '/auth/login',\n      method: 'post',\n      data: {\n        username,\n        password\n      }\n    });\n    if (response.token) {\n      setAuthData(response.token);\n    }\n    return response;\n  }\n\n  // 用户登出\n  static async logout() {\n    clearAuthData();\n    return request({\n      url: '/auth/logout',\n      method: 'post'\n    });\n  }\n\n  // 获取当前用户信息\n  static async getCurrentUser() {\n    return request({\n      url: '/users/me',\n      method: 'get'\n    });\n  }\n\n  // 更新用户信息\n  static async updateProfile(data) {\n    return request({\n      url: '/users/me',\n      method: 'put',\n      data\n    });\n  }\n\n  // 获取导师的学生列表\n  static async getStudents() {\n    return request({\n      url: '/users/students',\n      method: 'get'\n    });\n  }\n\n  // 获取所有用户（仅管理员）\n  static async getAllUsers() {\n    return request({\n      url: '/users',\n      method: 'get'\n    });\n  }\n\n  // 删除用户（仅管理员）\n  static async deleteUser(userId) {\n    return request({\n      url: `/users/${userId}`,\n      method: 'delete'\n    });\n  }\n\n  // 从JWT解析用户信息\n  static _getUserFromToken(token) {\n    const base64Payload = token.split('.')[1];\n    const payload = JSON.parse(atob(base64Payload));\n    return {\n      id: payload.id,\n      username: payload.username,\n      role: payload.role\n    };\n  }\n\n  // 统一错误处理\n  static _handleError(error) {\n    if (error.response) {\n      // 后端返回的业务错误\n      return new Error(error.response.data.message || '请求失败');\n    } else {\n      // 网络或系统错误\n      return new Error('网络连接异常，请稍后重试');\n    }\n  }\n}\nexport default AuthAPI;","map":{"version":3,"names":["request","getAuthHeader","clearAuthData","setAuthData","AuthAPI","register","userData","url","method","data","login","username","password","response","token","logout","getCurrentUser","updateProfile","getStudents","getAllUsers","deleteUser","userId","_getUserFromToken","base64Payload","split","payload","JSON","parse","atob","id","role","_handleError","error","Error","message"],"sources":["C:/Users/仲佳泽/Desktop/大学作业/软件工程/moyun-reading-platform/frontend/src/api/auth.js"],"sourcesContent":["import request from '@/utils/request'\r\nimport { getAuthHeader, clearAuthData, setAuthData } from './utils';\r\n\r\nclass AuthAPI {\r\n  // 用户注册\r\n  static async register(userData) {\r\n    return request({\r\n      url: '/auth/register',\r\n      method: 'post',\r\n      data: userData\r\n    })\r\n  }\r\n\r\n  // 用户登录\r\n  static async login(username, password) {\r\n    const response = await request({\r\n      url: '/auth/login',\r\n      method: 'post',\r\n      data: { username, password }\r\n    })\r\n    if (response.token) {\r\n      setAuthData(response.token)\r\n    }\r\n    return response\r\n  }\r\n\r\n  // 用户登出\r\n  static async logout() {\r\n    clearAuthData()\r\n    return request({\r\n      url: '/auth/logout',\r\n      method: 'post'\r\n    })\r\n  }\r\n\r\n  // 获取当前用户信息\r\n  static async getCurrentUser() {\r\n    return request({\r\n      url: '/users/me',\r\n      method: 'get'\r\n    })\r\n  }\r\n\r\n  // 更新用户信息\r\n  static async updateProfile(data) {\r\n    return request({\r\n      url: '/users/me',\r\n      method: 'put',\r\n      data\r\n    })\r\n  }\r\n\r\n  // 获取导师的学生列表\r\n  static async getStudents() {\r\n    return request({\r\n      url: '/users/students',\r\n      method: 'get'\r\n    })\r\n  }\r\n\r\n  // 获取所有用户（仅管理员）\r\n  static async getAllUsers() {\r\n    return request({\r\n      url: '/users',\r\n      method: 'get'\r\n    })\r\n  }\r\n\r\n  // 删除用户（仅管理员）\r\n  static async deleteUser(userId) {\r\n    return request({\r\n      url: `/users/${userId}`,\r\n      method: 'delete'\r\n    })\r\n  }\r\n\r\n  // 从JWT解析用户信息\r\n  static _getUserFromToken(token) {\r\n    const base64Payload = token.split('.')[1];\r\n    const payload = JSON.parse(atob(base64Payload));\r\n    return {\r\n      id: payload.id,\r\n      username: payload.username,\r\n      role: payload.role\r\n    };\r\n  }\r\n\r\n  // 统一错误处理\r\n  static _handleError(error) {\r\n    if (error.response) {\r\n      // 后端返回的业务错误\r\n      return new Error(error.response.data.message || '请求失败');\r\n    } else {\r\n      // 网络或系统错误\r\n      return new Error('网络连接异常，请稍后重试');\r\n    }\r\n  }\r\n}\r\n\r\nexport default AuthAPI;"],"mappings":";AAAA,OAAOA,OAAO,MAAM,iBAAiB;AACrC,SAASC,aAAa,EAAEC,aAAa,EAAEC,WAAW,QAAQ,SAAS;AAEnE,MAAMC,OAAO,CAAC;EACZ;EACA,aAAaC,QAAQA,CAACC,QAAQ,EAAE;IAC9B,OAAON,OAAO,CAAC;MACbO,GAAG,EAAE,gBAAgB;MACrBC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEH;IACR,CAAC,CAAC;EACJ;;EAEA;EACA,aAAaI,KAAKA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;IACrC,MAAMC,QAAQ,GAAG,MAAMb,OAAO,CAAC;MAC7BO,GAAG,EAAE,aAAa;MAClBC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAE;QAAEE,QAAQ;QAAEC;MAAS;IAC7B,CAAC,CAAC;IACF,IAAIC,QAAQ,CAACC,KAAK,EAAE;MAClBX,WAAW,CAACU,QAAQ,CAACC,KAAK,CAAC;IAC7B;IACA,OAAOD,QAAQ;EACjB;;EAEA;EACA,aAAaE,MAAMA,CAAA,EAAG;IACpBb,aAAa,CAAC,CAAC;IACf,OAAOF,OAAO,CAAC;MACbO,GAAG,EAAE,cAAc;MACnBC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;;EAEA;EACA,aAAaQ,cAAcA,CAAA,EAAG;IAC5B,OAAOhB,OAAO,CAAC;MACbO,GAAG,EAAE,WAAW;MAChBC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;;EAEA;EACA,aAAaS,aAAaA,CAACR,IAAI,EAAE;IAC/B,OAAOT,OAAO,CAAC;MACbO,GAAG,EAAE,WAAW;MAChBC,MAAM,EAAE,KAAK;MACbC;IACF,CAAC,CAAC;EACJ;;EAEA;EACA,aAAaS,WAAWA,CAAA,EAAG;IACzB,OAAOlB,OAAO,CAAC;MACbO,GAAG,EAAE,iBAAiB;MACtBC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;;EAEA;EACA,aAAaW,WAAWA,CAAA,EAAG;IACzB,OAAOnB,OAAO,CAAC;MACbO,GAAG,EAAE,QAAQ;MACbC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;;EAEA;EACA,aAAaY,UAAUA,CAACC,MAAM,EAAE;IAC9B,OAAOrB,OAAO,CAAC;MACbO,GAAG,EAAE,UAAUc,MAAM,EAAE;MACvBb,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;;EAEA;EACA,OAAOc,iBAAiBA,CAACR,KAAK,EAAE;IAC9B,MAAMS,aAAa,GAAGT,KAAK,CAACU,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACzC,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACL,aAAa,CAAC,CAAC;IAC/C,OAAO;MACLM,EAAE,EAAEJ,OAAO,CAACI,EAAE;MACdlB,QAAQ,EAAEc,OAAO,CAACd,QAAQ;MAC1BmB,IAAI,EAAEL,OAAO,CAACK;IAChB,CAAC;EACH;;EAEA;EACA,OAAOC,YAAYA,CAACC,KAAK,EAAE;IACzB,IAAIA,KAAK,CAACnB,QAAQ,EAAE;MAClB;MACA,OAAO,IAAIoB,KAAK,CAACD,KAAK,CAACnB,QAAQ,CAACJ,IAAI,CAACyB,OAAO,IAAI,MAAM,CAAC;IACzD,CAAC,MAAM;MACL;MACA,OAAO,IAAID,KAAK,CAAC,cAAc,CAAC;IAClC;EACF;AACF;AAEA,eAAe7B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}