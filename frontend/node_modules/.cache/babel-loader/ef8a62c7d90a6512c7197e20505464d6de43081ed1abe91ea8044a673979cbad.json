{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nimport request from '@/utils/request';\nimport { getAuthHeader, clearAuthData, setAuthData } from './utils';\nclass AuthAPI {\n  // 用户注册\n  static async register(userData) {\n    return request({\n      url: '/auth/register',\n      method: 'post',\n      data: userData\n    });\n  }\n\n  // 用户登录\n  static async login(username, password) {\n    try {\n      const response = await request({\n        url: '/auth/login',\n        method: 'post',\n        data: {\n          username,\n          password\n        }\n      });\n      if (response.token) {\n        setAuthData(response.token);\n        // 解析并返回用户信息\n        const user = this._getUserFromToken(response.token);\n        if (!user) {\n          throw new Error('无效的token');\n        }\n        return user;\n      }\n      throw new Error('登录失败：未获取到token');\n    } catch (error) {\n      clearAuthData();\n      throw error;\n    }\n  }\n\n  // 用户登出\n  static async logout() {\n    try {\n      const token = localStorage.getItem('token');\n      if (token) {\n        await request({\n          url: '/auth/logout',\n          method: 'post',\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      }\n    } finally {\n      clearAuthData();\n    }\n  }\n\n  // 获取当前用户信息\n  static async getCurrentUser() {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('未登录');\n      }\n      return await request({\n        url: '/users/me',\n        method: 'get',\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    } catch (error) {\n      if (error.response?.status === 401) {\n        clearAuthData();\n      }\n      throw error;\n    }\n  }\n\n  // 更新用户信息\n  static async updateProfile(data) {\n    return request({\n      url: '/users/me',\n      method: 'put',\n      data\n    });\n  }\n\n  // 获取导师的学生列表\n  static async getStudents() {\n    return request({\n      url: '/users/students',\n      method: 'get'\n    });\n  }\n\n  // 获取所有用户（仅管理员）\n  static async getAllUsers() {\n    return request({\n      url: '/users',\n      method: 'get'\n    });\n  }\n\n  // 删除用户（仅管理员）\n  static async deleteUser(userId) {\n    return request({\n      url: `/users/${userId}`,\n      method: 'delete'\n    });\n  }\n\n  // 从JWT解析用户信息\n  static _getUserFromToken(token) {\n    try {\n      const base64Payload = token.split('.')[1];\n      const payload = JSON.parse(atob(base64Payload));\n      return {\n        id: payload.id,\n        username: payload.username,\n        role: payload.role\n      };\n    } catch (error) {\n      console.error('解析token失败:', error);\n      return null;\n    }\n  }\n\n  // 统一错误处理\n  static _handleError(error) {\n    if (error.response) {\n      // 后端返回的业务错误\n      return new Error(error.response.data.message || '请求失败');\n    } else {\n      // 网络或系统错误\n      return new Error('网络连接异常，请稍后重试');\n    }\n  }\n}\nexport default AuthAPI;","map":{"version":3,"names":["request","getAuthHeader","clearAuthData","setAuthData","AuthAPI","register","userData","url","method","data","login","username","password","response","token","user","_getUserFromToken","Error","error","logout","localStorage","getItem","headers","Authorization","getCurrentUser","status","updateProfile","getStudents","getAllUsers","deleteUser","userId","base64Payload","split","payload","JSON","parse","atob","id","role","console","_handleError","message"],"sources":["C:/Users/仲佳泽/Desktop/大学作业/软件工程/moyun-reading-platform/frontend/src/api/auth.js"],"sourcesContent":["import request from '@/utils/request'\r\nimport { getAuthHeader, clearAuthData, setAuthData } from './utils';\r\n\r\nclass AuthAPI {\r\n  // 用户注册\r\n  static async register(userData) {\r\n    return request({\r\n      url: '/auth/register',\r\n      method: 'post',\r\n      data: userData\r\n    })\r\n  }\r\n\r\n  // 用户登录\r\n  static async login(username, password) {\r\n    try {\r\n      const response = await request({\r\n        url: '/auth/login',\r\n        method: 'post',\r\n        data: { username, password }\r\n      })\r\n      \r\n      if (response.token) {\r\n        setAuthData(response.token)\r\n        // 解析并返回用户信息\r\n        const user = this._getUserFromToken(response.token)\r\n        if (!user) {\r\n          throw new Error('无效的token')\r\n        }\r\n        return user\r\n      }\r\n      throw new Error('登录失败：未获取到token')\r\n    } catch (error) {\r\n      clearAuthData()\r\n      throw error\r\n    }\r\n  }\r\n\r\n  // 用户登出\r\n  static async logout() {\r\n    try {\r\n      const token = localStorage.getItem('token')\r\n      if (token) {\r\n        await request({\r\n          url: '/auth/logout',\r\n          method: 'post',\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        })\r\n      }\r\n    } finally {\r\n      clearAuthData()\r\n    }\r\n  }\r\n\r\n  // 获取当前用户信息\r\n  static async getCurrentUser() {\r\n    try {\r\n      const token = localStorage.getItem('token')\r\n      if (!token) {\r\n        throw new Error('未登录')\r\n      }\r\n      return await request({\r\n        url: '/users/me',\r\n        method: 'get',\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      })\r\n    } catch (error) {\r\n      if (error.response?.status === 401) {\r\n        clearAuthData()\r\n      }\r\n      throw error\r\n    }\r\n  }\r\n\r\n  // 更新用户信息\r\n  static async updateProfile(data) {\r\n    return request({\r\n      url: '/users/me',\r\n      method: 'put',\r\n      data\r\n    })\r\n  }\r\n\r\n  // 获取导师的学生列表\r\n  static async getStudents() {\r\n    return request({\r\n      url: '/users/students',\r\n      method: 'get'\r\n    })\r\n  }\r\n\r\n  // 获取所有用户（仅管理员）\r\n  static async getAllUsers() {\r\n    return request({\r\n      url: '/users',\r\n      method: 'get'\r\n    })\r\n  }\r\n\r\n  // 删除用户（仅管理员）\r\n  static async deleteUser(userId) {\r\n    return request({\r\n      url: `/users/${userId}`,\r\n      method: 'delete'\r\n    })\r\n  }\r\n\r\n  // 从JWT解析用户信息\r\n  static _getUserFromToken(token) {\r\n    try {\r\n      const base64Payload = token.split('.')[1]\r\n      const payload = JSON.parse(atob(base64Payload))\r\n      return {\r\n        id: payload.id,\r\n        username: payload.username,\r\n        role: payload.role\r\n      }\r\n    } catch (error) {\r\n      console.error('解析token失败:', error)\r\n      return null\r\n    }\r\n  }\r\n\r\n  // 统一错误处理\r\n  static _handleError(error) {\r\n    if (error.response) {\r\n      // 后端返回的业务错误\r\n      return new Error(error.response.data.message || '请求失败');\r\n    } else {\r\n      // 网络或系统错误\r\n      return new Error('网络连接异常，请稍后重试');\r\n    }\r\n  }\r\n}\r\n\r\nexport default AuthAPI;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}